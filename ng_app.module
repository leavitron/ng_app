<?php
/**
 * @file ng_app.module
 *
 * Implements the AngularJS-driven app root.
 */

<<<<<<< HEAD
function ng_app_register_module($module,$config_file) {
  angularjs_init_application('ngApp'); // todo: remove dependencie
  global $appsettings;
  $appsettings = ng_app_get_appsettings_json($config_file,true);
  variable_set('ng_app_module',$module);
  variable_set('ng_app_path_to_framework',$appsettings['path_to_lib']);
=======
function ng_app_init(){
  global $ng_app_path_to_lib;
  $ng_app_path_to_lib = "http://app_server.eu01.aws.af.cm";
  $settings_js = array(
    'path_to_lib' => variable_get('ng_app_path_to_lib',NULL),
  );
  drupal_add_js(array('ng_app' => $settings_js), 'setting');
}

function ng_app_register_module($module,$config_file) {
  angularjs_init_application('ngApp'); // todo: remove dependencie
  $path_to_app = $GLOBALS['base_root'].base_path().drupal_get_path('module', $module);
  $lib = variable_get('ng_app_path_to_lib');
  $appsettings = ng_app_get_appsettings_json($config_file,true);
  $appsettings['path_to_lib'] = $lib;
  variable_set('ng_app_module',$module);
>>>>>>> FETCH_HEAD
  variable_set('ng_app_config_file',$config_file);
  variable_set('ng_app_appsettings',$appsettings);
  $module_settings = array(
    'config_file' => $config_file,
    'widgets' => $appsettings['widgets'],
    'path_to_module' => drupal_get_path('module', 'ng_app'),
<<<<<<< HEAD
    'path_to_framework' => $lib,
=======
    'path_to_lib' => $lib,
>>>>>>> FETCH_HEAD
    'domain' => $GLOBALS['_SERVER']['HTTP_HOST'].rtrim(base_path(), "/"),
    'restws_csrf_token' => drupal_get_token('restws'),
    'basePath' => url('', array(
      'absolute' => TRUE
    ))
  );
  drupal_add_js(array('ng_app' => $module_settings), 'setting');
  // js scripts
  $ng_app_modules = $appsettings['ng_app_modules'];
  $ng_app_standalone_insert = '';
  foreach ($appsettings['dependencies'] as $d => $dependencie) {
    drupal_add_js($lib . $dependencie);
    $ng_app_standalone_insert .= '<script src="'.$lib . $dependencie.'"></script>';
  }
  $ng_app_standalone_insert .= '<script src="js/app.js"></script>';
  $ng_app_scripts = array(
    'js/controllers.js',
    'js/directives.js',
    'js/services.js'
  );
  foreach ($appsettings['styleSheets'] as $s => $css) {
    drupal_add_css($lib.$css, array('group' => CSS_THEME, 'type' => 'external'));
    $ng_app_standalone_insert .= '<link rel="stylesheet" href='.$lib.$css.'"/>';
  }
  foreach ($ng_app_scripts as $i => $script) {
    drupal_add_js($path_to_app.'/'.$script);
    $ng_app_standalone_insert .= '<script src="'.$script.'"></script>';
  }
  $widgets = $appsettings['widgets'];
  foreach ($widgets as $index => $widget) {
    $keys = array_keys($widget);
    array_push($ng_app_modules, "ngApp.".$keys[0]);
    array_push($ng_app_scripts, '/'. $keys[0] .'/'. $keys[0] .'.js');
    $ng_app_standalone_insert .= '<script src="'.$path_to_app.'/'. $keys[0] .'/'. $keys[0] .'.js"></script>';
  }

  // standdalone: app.js
  $script = '
    /*
    * DO NOT ALTER: dynamically generated Drupal app:
    */
    var ng_app_modules = '.drupal_json_encode($ng_app_modules).';
    var ng_app_config_file = "'.$GLOBALS['base_root'].base_path().drupal_get_path('module', $module).'/appsettings.jsonp";
    var ng_app_domain= "'.$GLOBALS['_SERVER']['HTTP_HOST'].rtrim(base_path(), "/").'";
    window.Drupal = window.Drupal || {};
    window.Drupal.settings = window.Drupal.settings || {};
    window.Drupal.settings.baseUrl = "http://"+ng_app_domain+"/";

     angular.module("ngApp",ng_app_modules)
        .controller("ngAppCtrl", function($scope,$http,AppService,AppSettings,DrupalService,Node) {
            AppSettings.domain = ng_app_domain;
            AppSettings.baseUrl = "http://"+ng_app_domain+"/";
            AppService.initialize({
                config_file: ng_app_config_file ,
                scope: $scope,
                callback:function(){
                    DrupalService.initialize({domain:AppSettings.domain,callback:function(){
                        // pass block models
                        var widgets = AppSettings.widgets;
                        for(var k in widgets){
                          for(var kk in widgets[k]){
                             window.Drupal.settings[kk]={}
                             window.Drupal.settings[kk].model=widgets[k][kk]
                          }
                        }
                        $scope.$broadcast("init",$scope);
                        $scope.render()
                    }})
                }
            });
            $scope.render = function(){

            };
        });
  ';
  $handle = fopen(drupal_get_path('module', $module) . '/js/app.js', 'w+');
  if($handle){
    if(!fwrite($handle, $script))
      die("couldn't write to file.");
  }
  drupal_add_js(drupal_get_path('module', $module) . '/js/app.js');

  // standdalone: index.html
  $html = '<!DOCTYPE html>
          <!--  DO NOT ALTER THIS FILE: dynamically generated Drupal app -->
          <html>
          <head>
              <meta charset="utf-8">
              <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
              <title>ng_blocks</title>
              <meta name="description" content="">
              <meta name="viewport" content="width=device-width">
              <link rel="stylesheet" href="http://app_server.eu01.aws.af.cm/css/vendor/bootstrap.min.css"/>
             '.$ng_app_standalone_insert.'
          </head>
          <body ng-app="ngApp" ng-controller="ngAppCtrl">

              <div ng-controller="standaloneAppCtrl">standaloneAppCtrl:  {{ test }}</div>

              <div ng-view>
                    <!--FIXME:-->
                  <div ng-include src="ng_block_3/ng_block_3.tpl.php"></div>
                  <div ng-include src="ng_block_3/ng_block_3.tpl.html"></div>
                  <ng_block_3></ng_block_3>
              </div>

              <div ng-controller="ng_block_3Ctrl">
                <h3>{{model.test}}</h3>
                <h5 class="well">drupal: {{model.test2}}</h5>
                <h5 class="well">standalone: {{model.testStandAlone}}</h5>
              </div>



          </body>
          </html>';
  $handle = fopen(drupal_get_path('module', $module) . '/index.html', 'w+');
  if($handle){
    if(!fwrite($handle, $html))
      die("couldn't write to file.");
  }
}

<<<<<<< HEAD
=======
/**
 * Implements hook_admin()
 */
function ng_app_admin() {
  global $ng_app_path_to_lib;
  $form = array();
  $form['ng_app_path_to_lib'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to libraries.'),
    '#default_value' => variable_get('ng_app_path_to_lib', $ng_app_path_to_lib),
    '#size' => 255,
    '#maxlength' => 255,
    '#description' => t("Path to the ng_app library."),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

>>>>>>> FETCH_HEAD
/**
 * Implements hook_preprocess_HOOK()
 */
function ng_app_preprocess_html(&$variables) {
  $variables['attributes_array']['ng-app'] = 'ngApp';  // attach angular app
  $variables['attributes_array']['ng-controller'] = 'ngAppCtrl';  // attach app root controller
}
function ng_app_preprocess_node(&$variables) {
  $node = $variables['node'];
  $variables['attributes_array']['data-nid'] = $node->nid;
  $variables['attributes_array']['data-type'] = $node->type;
  //$variables['classes_array'][] = 'angular-node';
}

/**
 * Implements hook_block_view().
 */
function ng_app_block_view($delta = '') {
  $block = array();
  $appsettings = variable_get('ng_app_appsettings');
  $widgets = $appsettings['widgets'];
  foreach ($widgets as $a => $widget) {
    if (isset($widget[$delta])){
      $settings = $widget[$delta];
      $settings['id'] = $delta;
      drupal_add_js(array($delta => array(
        'model' => $settings
      )),'setting');
      $block['subject'] = t($settings['title']);
      $block['content'] = array(
        '#theme' => $delta,
        '#attached' => array(
          'js' => array(),
        ),
      );
    }
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function ng_app_theme() {
  $appsettings = variable_get('ng_app_appsettings');
  $widgets = $appsettings['widgets'];
  $array = array();
  foreach ($widgets as $key => $widget) {
    $keys = array_keys($widget);
    $id = $keys[0];
    $path = drupal_get_path('module',variable_get('ng_app_module')) . '/' . $id;
    drupal_add_js(drupal_get_path('module', variable_get('ng_app_module')).'/'.$id.'/'.$id.'.js');
    $array[$id] = array(
      'template' => '/'.$id,
      'variables' => $widget[$id],
      'path' => $path
    );
  }
  return $array;
}

/**
 * Implements hook_block_info().
 */
function ng_app_block_info() {
  $blocks = array();
  $appsettings = variable_get('ng_app_appsettings');
  $widgets = $appsettings['widgets'];
  foreach ($widgets as $key => $widget) {
    $keys = array_keys($widget);
    $id = $keys[0];
    $blocks[$id] = array(
      'info' => t('Angular: '.$widget[$id]['title'])
    );
  }
  return $blocks;
}


/**
 * Implements hook_menu()
 */
//function ng_app_menu() {
//  $items['admin/config/media/ng_app'] = array(
//    'title' => t('Angular Apps'),
//    'description' => t('ng-app module settings.'),
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('ng_app_admin'),
//    'access arguments' => array('access administration pages'),
//    'type' => MENU_NORMAL_ITEM,
//  );
//  return $items;
//}

/**
 * Alter the theme hook suggestions used by the fences module.
 *
 * @param $fences
 *   An array containing the data returned by hook_fences_suggestion_info().
 */
function ng_app_fences_suggestion_info_alter(&$fences) {
//   $fences['field']['div'] =  array(
//     'label' => t('div'),
//     'element' => 'div', // If multiple elements are  used they should be seperated by spaces, e.g. 'pre code'.
//     'description' => t('<div> - attaches the angular fieldController'),
//     'groups' => array(t('Angular directives')),
//  );
//  $fences['field']['swipe'] =  array(
//    'label' => t('swipe'),
//    'element' => 'swipe', // If multiple elements are  used they should be seperated by spaces, e.g. 'pre code'.
//    'description' => t('<swipe> - wrap fields in a swipable element (use only for multiple fields)'),
//    'groups' => array(t('Angular directives')),
//  );
//  $fences['field']['accordion'] =  array(
//    'label' => t('accordion'),
//    'element' => 'accordion', // If multiple elements are  used they should be seperated by spaces, e.g. 'pre code'.
//    'description' => t('<accordion> - wrap fields in a accordion element (use only for multiple fields)'),
//    'groups' => array(t('Angular directives')),
//  );
  return $fences;
}


function ng_app_get_appsettings_json($url,$jsonp = false){
  $file = $url;
  $string = file_get_contents($file);
  $object = json_decode($string,true);
  $settingsTemp = array();
  if (isset($object['appsettings']['add'])){ // legacy flex
    foreach ($object['appsettings']['add'] as $add => $add_a) {
      $settingsTemp[$add_a['key']] = $add_a['value'];
    }
  }else{
    $settingsTemp = json_decode($string,true);
  }
  // save jsonp version
  if($jsonp == true){
    $jsonp = "JsonWrapping(". $string .");";
    $handle = fopen($url.'p', 'w+');
    if($handle){
      if(!fwrite($handle, $jsonp))
        die("couldn't write to file.");
    }
  }
  return $settingsTemp;
}
